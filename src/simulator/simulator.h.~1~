/***************************************************************************
 *   Copyright (C) 2012 by santiago Gonz√°lez                               *
 *   santigoro@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, see <http://www.gnu.org/licenses/>.  *
 *                                                                         *
 ***************************************************************************/

#ifndef SIMULATOR_H
#define SIMULATOR_H

#include <qtconcurrentrun.h>
#include <QElapsedTimer>

#include "circmatrix.h"
#include "component.h"

#define LAST_SIM_EVENT 99

class BaseProcessor;
class eElement;
class eNode;



class MAINMODULE_EXPORT Simulator : public QObject
{
    struct simEvent_t{
            simEvent_t* next;
            uint64_t    time;
            eElement*   comp;
    };
    struct simEventList_t {
        simEvent_t  events[LAST_SIM_EVENT+1];
        simEvent_t* eventFree;
        simEvent_t* first;
    };


    Q_OBJECT
    public:
        Simulator( QObject* parent=0 );
        ~Simulator();

 static Simulator* self() { return m_pSelf; }

#ifdef I_NEED_ADD_EVENTS
         void addEvent( uint64_t time, eElement* comp )
         {
             time += m_circTime;
             simEvent_t* new_event = m_eventList.eventFree;
             simEvent_t* last  = 0l;
             simEvent_t* event = m_eventList.first;

             while( event )
             {
                 if( time <= event->time )
                 {
                     if( time == event->time ) // Same time
                     {
                         if( (comp == 0) // In this case any event will be ok
                          || (comp == event->comp) )  // event exist
                             return;
                     }
                     break;
                 }
                 last  = event;
                 event = event->next;
             }
             m_eventList.eventFree = new_event->next;
             new_event->time = time;
             new_event->comp = comp;

             if( last ) last->next = new_event;
             else       m_eventList.first = new_event; // List was empty
             new_event->next = event;
         }
#endif //I_NEED_ADD_EVENTS

 inline void freeEvent( simEvent_t* event );
        void clearEventList();

        void runContinuous();
        void stopTimer();
        void resumeTimer();
        void pauseSim();
        void resumeSim();
        void stopSim();
        void stopDebug();
        void startSim();
        void debug( bool run );
        void runGraphicStep();
        void runGraphicStep1();
        void runGraphicStep2();

        void runCircuit();
        
        int circuitRate() { return m_stepsPF; }
        uint64_t simuRate() { return m_stepsPS; }
        void simuRateChanged( uint64_t rate );

        int  reaClock() { return m_stepsReac; }
        void setReaClock( int value );

        int    noLinAcc() { return m_noLinAcc; }
        void   setNoLinAcc( int ac );
        double NLaccuracy() { return 1/pow(10,m_noLinAcc)/2; }
        
        bool isRunning() { return m_isrunning; }
        bool isPaused() { return m_paused; }
        
        uint64_t step() { return m_step; }
        uint64_t circTime() { return m_circTime; }
        void setCircTime( uint64_t time );

        QList<eNode*> geteNodes() { return m_eNodeList; }

        void timerEvent( QTimerEvent* e );

        double stepsPerus() { return m_stepsPerus; }

        double m_stepsPerus;
        double m_stepNano;

        uint64_t stepsPerSec;
        uint64_t mS(){ return m_RefTimer.elapsed(); }

        void addToEnodeBusList( eNode* nod );
        void remFromEnodeBusList( eNode* nod, bool del );

        void addToEnodeList( eNode* nod );
        void remFromEnodeList( eNode* nod, bool del );

        void addToChangedNodes( eNode* nod );
        //void addToNonLinNodes( eNode* nod );
        
        void addToElementList( eElement* el );
        void remFromElementList( eElement* el );
        
        void addToUpdateList( eElement* el );
        void remFromUpdateList( eElement* el );

        void addToSimuClockList( eElement* el );
        void remFromSimuClockList( eElement* el );
        
        void addToNoLinList( eElement* el );

    signals:
        void pauseDebug();
        void resumeDebug();
        void rateChanged();
        
    private:
 static Simulator* m_pSelf;

        inline void solveMatrix();
        //inline void solveMatrixNL();

        QFuture<void> m_CircuitFuture;

        CircMatrix m_matrix;

        QList<eNode*>    m_eNodeList;
        QList<eNode*>    m_eNodeBusList;
        //QList<eNode*>    m_changedNodeList;

        simEventList_t  m_eventList;

        eNode*    m_changedNode;
        eNode*    m_chNodeLast;
        //eNode*    m_nonLinNode;
        //eElement* m_nonLinear;

        QList<eElement*> m_elementList;
        QList<eElement*> m_updateList;

        QList<eElement*> m_nonLinear;
        QList<eElement*> m_simuClock;

        bool m_isrunning;
        bool m_debugging;
        bool m_paused;
        bool m_error;

        int m_timerId;
        int m_timerTick;
        int m_noLinAcc;
        int m_stepsReac;

        uint64_t m_stepsPS;
        uint64_t m_stepsPF;
        uint64_t m_updtCounter;

        uint64_t m_circTime;
        uint64_t m_step;
        uint64_t m_tStep;
        uint64_t m_lastStep;
        
        uint64_t m_refTime;
        uint64_t m_lastRefT;

        QElapsedTimer m_RefTimer;
};
 #endif


